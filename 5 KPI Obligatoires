----- CA DEUX MEILLEURS VENDEURS MENSUEL AVEC CLASSEMENT

WITH MonthlySales AS (
    SELECT 
        e.employeeNumber, 
        e.lastName AS employe, 
        YEAR(o.orderDate) AS year, 
        MONTH(o.orderDate) AS mois, 
        SUM(od.quantityOrdered * od.priceEach) AS CA
    FROM employees e
    JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber
    JOIN orders o ON c.customerNumber = o.customerNumber
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    GROUP BY e.employeeNumber, e.lastName, YEAR(o.orderDate), MONTH(o.orderDate)
),

RankedSales AS (
    SELECT 
        ms.employeeNumber, 
        ms.employe, 
        ms.year, 
        ms.mois, 
        ms.CA,
        RANK() OVER (PARTITION BY ms.year, ms.mois ORDER BY ms.CA DESC) AS classement
    FROM MonthlySales ms
)

SELECT 
    rs.employeeNumber AS salesRepEmployeeNumber, 
    CONCAT(rs.year, '-', LPAD(rs.mois, 2, '0')) AS mois, 
    rs.employe, 
    rs.CA, 
    rs.classement
FROM RankedSales rs
WHERE rs.classement <= 2
ORDER BY rs.year DESC, rs.mois DESC, rs.classement;

--CA M vs M-1 par pays

WITH MonthlySales AS (
    SELECT 
        p.productLine AS category,
        YEAR(o.orderDate) AS year,
        MONTH(o.orderDate) AS month,
        SUM(od.quantityOrdered) AS total_quantity
    FROM orders o
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    JOIN customers c ON o.customerNumber = c.customerNumber
    JOIN products p ON od.productCode = p.productCode
    GROUP BY p.productLine, YEAR(o.orderDate), MONTH(o.orderDate)
),
PivotedSales AS (
    SELECT
        category,
        month,
        SUM(CASE WHEN year = 2024 THEN total_quantity ELSE 0 END) AS quantity_2024,
        SUM(CASE WHEN year = 2023 THEN total_quantity ELSE 0 END) AS quantity_2023,
        SUM(CASE WHEN year = 2022 THEN total_quantity ELSE 0 END) AS quantity_2022
    FROM MonthlySales
    GROUP BY category, month
)
SELECT
    category,
    month,
    quantity_2024,
    quantity_2023,
    quantity_2022,
    CASE
        WHEN quantity_2023 = 0 THEN NULL
        ELSE (quantity_2024 - quantity_2023) / quantity_2023 * 100
    END AS evolution_2024_vs_2023,
    CASE
        WHEN quantity_2022 = 0 THEN NULL
        ELSE (quantity_2023 - quantity_2022) / quantity_2022 * 100
    END AS evolution_2023_vs_2022
FROM PivotedSales
ORDER BY category, month; 

-----STOCK TOP 5 : Trouver la fonction SQL qui récup la date d’aujourd’hui sur l’ordinateur, et soustrait l’intervalle choisi.

WITH MonthlySales AS (
    SELECT 
        YEAR(o.orderDate) AS year,
        MONTH(o.orderDate) AS month,
        SUM(od.quantityOrdered * od.priceEach) AS total_sales
    FROM 
        orders o
    JOIN 
        orderdetails od ON o.orderNumber = od.orderNumber
    GROUP BY 
        YEAR(o.orderDate), MONTH(o.orderDate)
),
SalesWithMovingAverage AS (
    SELECT 
        year,
        month,
        total_sales,
        AVG(total_sales) OVER (ORDER BY year, month ROWS BETWEEN 11 PRECEDING AND CURRENT ROW) AS moving_average
    FROM 
        MonthlySales
)
SELECT 
    year,
    month,
    total_sales,
    moving_average,
    ((total_sales - moving_average) / moving_average) * 100 AS seasonality_rate
FROM 
    SalesWithMovingAverage
ORDER BY 
    year, month;
