SHOW columns FROM orderdetails;

-- somme achats par facture
SELECT orderNumber,
SUM(priceEach * quantityOrdered) AS totalOrderAmount
FROM orderdetails
GROUP BY orderNumber;

-- Somme des achats par client
SELECT 
    o.customerNumber, 
    SUM(od.quantityOrdered * od.priceEach) AS totalPurchases
FROM 
    orders o
JOIN 
    orderdetails od
ON 
    o.orderNumber = od.orderNumber
GROUP BY 
    o.customerNumber;
    
-- le total purchase par client et par pays
SELECT 
c.customerNumber, 
c.city, 
c.country,
SUM(od.quantityOrdered * od.priceEach) AS totalPurchases
FROM 
customers c
JOIN 
orders o 
ON 
c.customerNumber = o.customerNumber
JOIN 
orderdetails od 
ON 
o.orderNumber = od.orderNumber
GROUP BY 
c.customerNumber, 
c.city, 
c.country
ORDER BY 
totalPurchases DESC;

-- CA global
SELECT 
SUM(priceEach * quantityOrdered) AS globalRevenue
FROM orderdetails;

-- CA global/ année
SELECT YEAR(o.orderDate) AS year,
SUM(od.priceEach * od.quantityOrdered) AS globalRevenue
FROM orders o
JOIN 
orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY 
YEAR(o.orderDate)
ORDER BY 
year;

-- CA GLOBAL PAR TRIMESTRE
SELECT
YEAR(o.orderDate) AS year,
QUARTER(o.orderDate) AS quarter,
SUM(od.priceEach * od.quantityOrdered) AS globalRevenue
FROM orders o
JOIN 
orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY 
YEAR(o.orderDate), QUARTER(o.orderDate)
ORDER BY 
year, quarter;

-- Marge BRUTE/année
SELECT YEAR(o.orderDate) AS year,
SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS grossMargin
FROM 
orderdetails od
JOIN 
orders o ON od.orderNumber = o.orderNumber
JOIN 
products p ON od.productCode = p.productCode
GROUP
BY YEAR(o.orderDate)
ORDER BY 
year;
 
-- MARGE BRUT POUR LE TOP 5 produit
SELECT p.productName,
SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS grossMargin
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY p.productName
ORDER BY grossMargin DESC
LIMIT 5;

-- MARGE BRUT FLOP DES 5 PRODUITS
SELECT p.productName,
SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS grossMargin
FROM orderdetails od
JOIN products p ON od.productCode = p.productCode
GROUP BY p.productName
ORDER BY grossMargin ASC
LIMIT 5;

-- EVOLUTION DES MARGES n VS n-1
SELECT productLine,year,sales,
LAG(sales, 1) OVER (PARTITION BY productLine ORDER BY year) AS previousYearSales,
CASE 
	WHEN LAG(sales, 1) OVER (PARTITION BY productLine ORDER BY year) IS NOT NULL 
	THEN (sales - LAG(sales, 1) OVER (PARTITION BY productLine ORDER BY year)) / LAG(sales, 1) OVER (PARTITION BY productLine ORDER BY year) * 100
    ELSE NULL
    END AS growthPercentage
FROM (
SELECT 
p.productLine,
YEAR(o.orderDate) AS year,
SUM((od.priceEach - p.buyPrice) * od.quantityOrdered) AS sales
FROM  
orderdetails od
JOIN 
products p ON od.productCode = p.productCode
JOIN 
orders o ON od.orderNumber = o.orderNumber
WHERE 
YEAR(o.orderDate) IN (2021, 2022, 2023)
GROUP BY 
p.productLine, YEAR(o.orderDate)
) AS subquery
ORDER BY 
productLine, year;

-- Variation des demandes pour chaque produit au cours des différents trimestres et années.
SELECT 
    p.productName,
    YEAR(o.orderDate) AS year,
    QUARTER(o.orderDate) AS quarter,
    SUM(od.quantityOrdered) AS totalQuantityOrdered
FROM 
    orderdetails od
JOIN 
    products p ON od.productCode = p.productCode
JOIN 
    orders o ON od.orderNumber = o.orderNumber
GROUP BY 
    p.productName, YEAR(o.orderDate), QUARTER(o.orderDate)
ORDER BY 
    p.productName, year, quarter;

-- Variation des demandes pour chaque ligne de produit au cours des différents trimestres et années
SELECT 
    p.productLine,
    YEAR(o.orderDate) AS year,
    QUARTER(o.orderDate) AS quarter,
    SUM(od.quantityOrdered) AS totalQuantityOrdered
FROM 
    orderdetails od
JOIN 
    products p ON od.productCode = p.productCode
JOIN 
    orders o ON od.orderNumber = o.orderNumber
GROUP BY 
    p.productLine, YEAR(o.orderDate), QUARTER(o.orderDate)
ORDER BY 
    p.productLine, year, quarter;


-- CA 2 meilleurs vendeurs

WITH TopSellers AS (
    SELECT e.employeeNumber, e.lastName, SUM(od.quantityOrdered * od.priceEach) AS total_sales
    FROM employees e
    JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber
    JOIN orders o ON c.customerNumber = o.customerNumber
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    GROUP BY e.employeeNumber, e.lastName
    ORDER BY total_sales DESC
    LIMIT 2
),

-- Calculer le CA mensuel pour les deux meilleurs vendeurs
MonthlySales AS (
    SELECT 
        e.employeeNumber, 
        e.lastName, 
        YEAR(o.orderDate) AS year, 
        MONTH(o.orderDate) AS month, 
        SUM(od.quantityOrdered * od.priceEach) AS monthly_sales
    FROM employees e
    JOIN customers c ON e.employeeNumber = c.salesRepEmployeeNumber
    JOIN orders o ON c.customerNumber = o.customerNumber
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    WHERE e.employeeNumber IN (SELECT employeeNumber FROM TopSellers)
    GROUP BY e.employeeNumber, e.lastName, YEAR(o.orderDate), MONTH(o.orderDate)
)

-- Sélectionner les résultats finaux
SELECT 
    ms.employeeNumber,
    ms.lastName,
    ms.year,
    ms.month,
    ms.monthly_sales
FROM MonthlySales ms
ORDER BY ms.employeeNumber, ms.year, ms.month;

--CA M vs M-1 par pays

WITH MonthlySales AS (
    SELECT 
        p.productLine AS category,
        YEAR(o.orderDate) AS year,
        MONTH(o.orderDate) AS month,
        SUM(od.quantityOrdered) AS total_quantity
    FROM orders o
    JOIN orderdetails od ON o.orderNumber = od.orderNumber
    JOIN customers c ON o.customerNumber = c.customerNumber
    JOIN products p ON od.productCode = p.productCode
    GROUP BY p.productLine, YEAR(o.orderDate), MONTH(o.orderDate)
),
PivotedSales AS (
    SELECT
        category,
        month,
        SUM(CASE WHEN year = 2024 THEN total_quantity ELSE 0 END) AS quantity_2024,
        SUM(CASE WHEN year = 2023 THEN total_quantity ELSE 0 END) AS quantity_2023,
        SUM(CASE WHEN year = 2022 THEN total_quantity ELSE 0 END) AS quantity_2022
    FROM MonthlySales
    GROUP BY category, month
)
SELECT
    category,
    month,
    quantity_2024,
    quantity_2023,
    quantity_2022,
    CASE
        WHEN quantity_2023 = 0 THEN NULL
        ELSE (quantity_2024 - quantity_2023) / quantity_2023 * 100
    END AS evolution_2024_vs_2023,
    CASE
        WHEN quantity_2022 = 0 THEN NULL
        ELSE (quantity_2023 - quantity_2022) / quantity_2022 * 100
    END AS evolution_2023_vs_2022
FROM PivotedSales
ORDER BY category, month;
